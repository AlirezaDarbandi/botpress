"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bluebird = require("bluebird");

var _bluebirdRetry = _interopRequireDefault(require("bluebird-retry"));

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _ms = _interopRequireDefault(require("ms"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INTERVAL_BASE = 10 * 1000;
const SCHEDULE_TO_OUTBOX_INTERVAL = INTERVAL_BASE * 1;
const SEND_BROADCAST_INTERVAL = INTERVAL_BASE * 1;

var _default = async (botId, bp, db) => {
  const emitChanged = _lodash.default.throttle(() => {
    bp.realtime.sendPayload(bp.RealTimePayload.forAdmins('broadcast.changed', {}));
  }, 1000);

  const _sendBroadcast = _bluebird.Promise.method((botId, row) => {
    let dropPromise = _bluebird.Promise.resolve(false);

    if (row.filters) {
      dropPromise = _bluebird.Promise.mapSeries(JSON.parse(row.filters), filter => {
        let fnBody = filter.trim();

        if (!/^return /i.test(fnBody)) {
          fnBody = 'return ' + fnBody;
        }

        const fn = new Function('bp', 'userId', 'channel', fnBody);
        return fn(bp, row.userId, row.platform);
      }).then(values => {
        return _lodash.default.some(values, v => {
          if (!_lodash.default.isBoolean(v)) {
            bp.logger.warn('Filter returned something other ' + 'than a boolean (or a Promise of a boolean)');
          }

          return typeof v !== 'undefined' && v !== null && v !== true;
        });
      });
    }

    return dropPromise.then(async drop => {
      if (drop) {
        bp.logger.debug(`Drop sending #${row.scheduleId} to user: ${row.userId}. Reason = Filters`);
        return;
      }

      const botInfo = await bp.bots.getBotById(botId);
      const user = await bp.users.getOrCreateUser(row.platform, row.userId, botId);
      let language = botInfo.defaultLanguage;

      if (user.result.attributes.language) {
        language = user.result.attributes.language;
      }

      const event = {
        state: {
          user: {
            language: language
          }
        }
      };
      const eventDestination = {
        channel: row.platform,
        botId,
        target: row.userId
      };
      const payloads = await bp.cms.renderElement(`!${row.text}`, {
        event
      }, eventDestination);

      for (const payload of payloads) {
        await bp.events.sendEvent(bp.IO.Event({ ...eventDestination,
          direction: 'outgoing',
          type: _lodash.default.get(payload, 'type', 'default'),
          payload
        }));
      }
    });
  });

  const trySendBroadcast = async broadcast => {
    const {
      scheduleId,
      scheduleUser
    } = broadcast;
    await (0, _bluebirdRetry.default)(() => _sendBroadcast(botId, broadcast), {
      max_tries: 3,
      interval: 1000,
      backoff: 3
    });
    await db.deleteBroadcastOutbox(scheduleUser, scheduleId);
    await db.increaseBroadcastSentCount(scheduleId);
  };

  const handleFailedSending = async (err, scheduleId) => {
    bp.logger.error(`Broadcast #${scheduleId}' failed. Broadcast aborted. Reason: ${err.message}`);
    await bp.notifications.create(botId, {
      botId,
      level: 'error',
      message: 'Broadcast #' + scheduleId + ' failed.' + ' Please check logs for the reason why.'
    });
    await db.updateErrorField(scheduleId);
    await db.deleteBroadcastOutboxById(scheduleId);
  };

  const scheduleToOutbox = async botId => {
    const schedulingLock = await bp.distributed.acquireLock(`broadcast/lock/scheduling_${botId}`, (0, _ms.default)('5m'));

    if (!schedulingLock) {
      return;
    }

    try {
      const inFiveMinutes = (0, _moment.default)().add(5, 'minutes').toDate();
      const endOfDay = (0, _moment.default)(inFiveMinutes).add(14, 'hours').toDate();
      const upcomingFixedTime = db.knex.date.isAfter(inFiveMinutes, 'ts');
      const upcomingVariableTime = db.knex.date.isAfter(endOfDay, 'date_time');
      const schedules = await db.getBroadcastSchedulesByTime(botId, upcomingFixedTime, upcomingVariableTime);
      await _bluebird.Promise.map(schedules, async schedule => {
        const timezones = await db.getUsersTimezone();
        await _bluebird.Promise.mapSeries(timezones, async tz => {
          await db.setBroadcastOutbox(botId, schedule, tz);
          const count = await db.getOutboxCount(botId, schedule);
          await db.updateTotalCount(schedule, count);
          bp.logger.info('Scheduled broadcast #' + schedule.id, '. [' + count + ' messages]');

          if (schedule.filters && JSON.parse(schedule.filters).length > 0) {
            bp.logger.info(`Filters found on broadcast #${schedule.id}. Filters are applied at sending time.`);
          }

          emitChanged();
        });
      });
    } finally {
      await schedulingLock.unlock();
    }
  };

  const sendBroadcasts = async botId => {
    try {
      const sendingLock = await bp.distributed.acquireLock(`broadcast/lock/sending_${botId}`, (0, _ms.default)('5m'));

      if (!sendingLock) {
        return;
      }

      try {
        const broadcasts = await db.getBroadcastOutbox(botId);
        let abort = false;
        await _bluebird.Promise.mapSeries(broadcasts, async broadcast => {
          if (abort) {
            return;
          }

          try {
            await trySendBroadcast(broadcast);
          } catch (err) {
            abort = true;
            await handleFailedSending(err, broadcast.scheduleId);
          } finally {
            emitChanged();
          }
        });
      } finally {
        await sendingLock.unlock();
      }
    } catch (error) {
      bp.logger.error('Broadcast sending error: ', error.message);
    }
  };

  setInterval(scheduleToOutbox.bind(undefined, botId), SCHEDULE_TO_OUTBOX_INTERVAL);
  setInterval(sendBroadcasts.bind(undefined, botId), SEND_BROADCAST_INTERVAL);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhZW1vbi50cyJdLCJuYW1lcyI6WyJJTlRFUlZBTF9CQVNFIiwiU0NIRURVTEVfVE9fT1VUQk9YX0lOVEVSVkFMIiwiU0VORF9CUk9BRENBU1RfSU5URVJWQUwiLCJib3RJZCIsImJwIiwiZGIiLCJlbWl0Q2hhbmdlZCIsIl8iLCJ0aHJvdHRsZSIsInJlYWx0aW1lIiwic2VuZFBheWxvYWQiLCJSZWFsVGltZVBheWxvYWQiLCJmb3JBZG1pbnMiLCJfc2VuZEJyb2FkY2FzdCIsIlByb21pc2UiLCJtZXRob2QiLCJyb3ciLCJkcm9wUHJvbWlzZSIsInJlc29sdmUiLCJmaWx0ZXJzIiwibWFwU2VyaWVzIiwiSlNPTiIsInBhcnNlIiwiZmlsdGVyIiwiZm5Cb2R5IiwidHJpbSIsInRlc3QiLCJmbiIsIkZ1bmN0aW9uIiwidXNlcklkIiwicGxhdGZvcm0iLCJ0aGVuIiwidmFsdWVzIiwic29tZSIsInYiLCJpc0Jvb2xlYW4iLCJsb2dnZXIiLCJ3YXJuIiwiZHJvcCIsImRlYnVnIiwic2NoZWR1bGVJZCIsImJvdEluZm8iLCJib3RzIiwiZ2V0Qm90QnlJZCIsInVzZXIiLCJ1c2VycyIsImdldE9yQ3JlYXRlVXNlciIsImxhbmd1YWdlIiwiZGVmYXVsdExhbmd1YWdlIiwicmVzdWx0IiwiYXR0cmlidXRlcyIsImV2ZW50Iiwic3RhdGUiLCJldmVudERlc3RpbmF0aW9uIiwiY2hhbm5lbCIsInRhcmdldCIsInBheWxvYWRzIiwiY21zIiwicmVuZGVyRWxlbWVudCIsInRleHQiLCJwYXlsb2FkIiwiZXZlbnRzIiwic2VuZEV2ZW50IiwiSU8iLCJFdmVudCIsImRpcmVjdGlvbiIsInR5cGUiLCJnZXQiLCJ0cnlTZW5kQnJvYWRjYXN0IiwiYnJvYWRjYXN0Iiwic2NoZWR1bGVVc2VyIiwibWF4X3RyaWVzIiwiaW50ZXJ2YWwiLCJiYWNrb2ZmIiwiZGVsZXRlQnJvYWRjYXN0T3V0Ym94IiwiaW5jcmVhc2VCcm9hZGNhc3RTZW50Q291bnQiLCJoYW5kbGVGYWlsZWRTZW5kaW5nIiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9ucyIsImNyZWF0ZSIsImxldmVsIiwidXBkYXRlRXJyb3JGaWVsZCIsImRlbGV0ZUJyb2FkY2FzdE91dGJveEJ5SWQiLCJzY2hlZHVsZVRvT3V0Ym94Iiwic2NoZWR1bGluZ0xvY2siLCJkaXN0cmlidXRlZCIsImFjcXVpcmVMb2NrIiwiaW5GaXZlTWludXRlcyIsImFkZCIsInRvRGF0ZSIsImVuZE9mRGF5IiwidXBjb21pbmdGaXhlZFRpbWUiLCJrbmV4IiwiZGF0ZSIsImlzQWZ0ZXIiLCJ1cGNvbWluZ1ZhcmlhYmxlVGltZSIsInNjaGVkdWxlcyIsImdldEJyb2FkY2FzdFNjaGVkdWxlc0J5VGltZSIsIm1hcCIsInNjaGVkdWxlIiwidGltZXpvbmVzIiwiZ2V0VXNlcnNUaW1lem9uZSIsInR6Iiwic2V0QnJvYWRjYXN0T3V0Ym94IiwiY291bnQiLCJnZXRPdXRib3hDb3VudCIsInVwZGF0ZVRvdGFsQ291bnQiLCJpbmZvIiwiaWQiLCJsZW5ndGgiLCJ1bmxvY2siLCJzZW5kQnJvYWRjYXN0cyIsInNlbmRpbmdMb2NrIiwiYnJvYWRjYXN0cyIsImdldEJyb2FkY2FzdE91dGJveCIsImFib3J0Iiwic2V0SW50ZXJ2YWwiLCJiaW5kIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFLQSxNQUFNQSxhQUFhLEdBQUcsS0FBSyxJQUEzQjtBQUNBLE1BQU1DLDJCQUEyQixHQUFHRCxhQUFhLEdBQUcsQ0FBcEQ7QUFDQSxNQUFNRSx1QkFBdUIsR0FBR0YsYUFBYSxHQUFHLENBQWhEOztlQUVlLE9BQU9HLEtBQVAsRUFBc0JDLEVBQXRCLEVBQXNDQyxFQUF0QyxLQUF1RDtBQUNwRSxRQUFNQyxXQUFXLEdBQUdDLGdCQUFFQyxRQUFGLENBQVcsTUFBTTtBQUNuQ0osSUFBQUEsRUFBRSxDQUFDSyxRQUFILENBQVlDLFdBQVosQ0FBd0JOLEVBQUUsQ0FBQ08sZUFBSCxD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QUFBLFdBQVcsQ0FBQ0wsY0FBYyxDQUFDTSxJQUFmLENBQW9CQyxTQUFwQixFQUErQnJILEtBQS9CLENBQUQsRUFBd0NELHVCQUF4QyxDQUFYO0FBQ0QsQyIsInNvdXJjZVJvb3QiOiIvbW50L0RvY3VtZW50cy9Qcm9qZXRzL0JvdFByZXNzL2JvdHByZXNzL21vZHVsZXMvYnJvYWRjYXN0L3NyYy9iYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0IHJldHJ5IGZyb20gJ2JsdWViaXJkLXJldHJ5J1xuaW1wb3J0ICogYXMgc2RrIGZyb20gJ2JvdHByZXNzL3NkaydcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xuaW1wb3J0IG1zIGZyb20gJ21zJ1xuXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnLi9kYidcbmltcG9ydCB7IEJyb2FkY2FzdCB9IGZyb20gJy4vdHlwaW5ncydcblxuY29uc3QgSU5URVJWQUxfQkFTRSA9IDEwICogMTAwMFxuY29uc3QgU0NIRURVTEVfVE9fT1VUQk9YX0lOVEVSVkFMID0gSU5URVJWQUxfQkFTRSAqIDFcbmNvbnN0IFNFTkRfQlJPQURDQVNUX0lOVEVSVkFMID0gSU5URVJWQUxfQkFTRSAqIDFcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGJvdElkOiBzdHJpbmcsIGJwOiB0eXBlb2Ygc2RrLCBkYjogRGF0YWJhc2UpID0+IHtcbiAgY29uc3QgZW1pdENoYW5nZWQgPSBfLnRocm90dGxlKCgpID0+IHtcbiAgICBicC5yZWFsdGltZS5zZW5kUGF5bG9hZChicC5SZWFsVGltZVBheWxvYWQuZm9yQWRtaW5zKCdicm9hZGNhc3QuY2hhbmdlZCcsIHt9KSlcbiAgfSwgMTAwMClcblxuICBjb25zdCBfc2VuZEJyb2FkY2FzdCA9IFByb21pc2UubWV0aG9kKChib3RJZDogc3RyaW5nLCByb3c6IEJyb2FkY2FzdCkgPT4ge1xuICAgIGxldCBkcm9wUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShmYWxzZSlcblxuICAgIGlmIChyb3cuZmlsdGVycykge1xuICAgICAgZHJvcFByb21pc2UgPSBQcm9taXNlLm1hcFNlcmllcyhKU09OLnBhcnNlKHJvdy5maWx0ZXJzKSwgKGZpbHRlcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIGxldCBmbkJvZHkgPSBmaWx0ZXIudHJpbSgpXG4gICAgICAgIGlmICghL15yZXR1cm4gL2kudGVzdChmbkJvZHkpKSB7XG4gICAgICAgICAgZm5Cb2R5ID0gJ3JldHVybiAnICsgZm5Cb2R5XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmbiA9IG5ldyBGdW5jdGlvbignYnAnLCAndXNlcklkJywgJ2NoYW5uZWwnLCBmbkJvZHkpXG4gICAgICAgIHJldHVybiBmbihicCwgcm93LnVzZXJJZCwgcm93LnBsYXRmb3JtKVxuICAgICAgfSkudGhlbih2YWx1ZXMgPT4ge1xuICAgICAgICByZXR1cm4gXy5zb21lKHZhbHVlcywgdiA9PiB7XG4gICAgICAgICAgaWYgKCFfLmlzQm9vbGVhbih2KSkge1xuICAgICAgICAgICAgYnAubG9nZ2VyLndhcm4oJ0ZpbHRlciByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgJyArICd0aGFuIGEgYm9vbGVhbiAob3IgYSBQcm9taXNlIG9mIGEgYm9vbGVhbiknKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcgJiYgdiAhPT0gbnVsbCAmJiB2ICE9PSB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBkcm9wUHJvbWlzZS50aGVuKGFzeW5jIGRyb3AgPT4ge1xuICAgICAgaWYgKGRyb3ApIHtcbiAgICAgICAgYnAubG9nZ2VyLmRlYnVnKGBEcm9wIHNlbmRpbmcgIyR7cm93LnNjaGVkdWxlSWR9IHRvIHVzZXI6ICR7cm93LnVzZXJJZH0uIFJlYXNvbiA9IEZpbHRlcnNgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgYm90SW5mbyA9IGF3YWl0IGJwLmJvdHMuZ2V0Qm90QnlJZChib3RJZClcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBicC51c2Vycy5nZXRPckNyZWF0ZVVzZXIocm93LnBsYXRmb3JtLCByb3cudXNlcklkLCBib3RJZClcbiAgICAgIGxldCBsYW5ndWFnZSA9IGJvdEluZm8uZGVmYXVsdExhbmd1YWdlXG4gICAgICBpZiAodXNlciEucmVzdWx0IS5hdHRyaWJ1dGVzIS5sYW5ndWFnZSkge1xuICAgICAgICBsYW5ndWFnZSA9IHVzZXIucmVzdWx0LmF0dHJpYnV0ZXMubGFuZ3VhZ2VcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXZlbnQgPSB7IHN0YXRlOiB7IHVzZXI6IHsgbGFuZ3VhZ2U6IGxhbmd1YWdlIH0gfSB9XG4gICAgICBjb25zdCBldmVudERlc3RpbmF0aW9uID0geyBjaGFubmVsOiByb3cucGxhdGZvcm0sIGJvdElkLCB0YXJnZXQ6IHJvdy51c2VySWQgfVxuICAgICAgY29uc3QgcGF5bG9hZHMgPSBhd2FpdCBicC5jbXMucmVuZGVyRWxlbWVudChgISR7cm93LnRleHR9YCwgeyBldmVudCB9LCBldmVudERlc3RpbmF0aW9uKVxuXG4gICAgICBmb3IgKGNvbnN0IHBheWxvYWQgb2YgcGF5bG9hZHMpIHtcbiAgICAgICAgYXdhaXQgYnAuZXZlbnRzLnNlbmRFdmVudChcbiAgICAgICAgICBicC5JTy5FdmVudCh7XG4gICAgICAgICAgICAuLi5ldmVudERlc3RpbmF0aW9uLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnb3V0Z29pbmcnLFxuICAgICAgICAgICAgdHlwZTogXy5nZXQocGF5bG9hZCwgJ3R5cGUnLCAnZGVmYXVsdCcpLFxuICAgICAgICAgICAgcGF5bG9hZFxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIGNvbnN0IHRyeVNlbmRCcm9hZGNhc3QgPSBhc3luYyAoYnJvYWRjYXN0OiBCcm9hZGNhc3QpID0+IHtcbiAgICBjb25zdCB7IHNjaGVkdWxlSWQsIHNjaGVkdWxlVXNlciB9ID0gYnJvYWRjYXN0XG5cbiAgICBhd2FpdCByZXRyeSgoKSA9PiBfc2VuZEJyb2FkY2FzdChib3RJZCwgYnJvYWRjYXN0KSwge1xuICAgICAgbWF4X3RyaWVzOiAzLFxuICAgICAgaW50ZXJ2YWw6IDEwMDAsXG4gICAgICBiYWNrb2ZmOiAzXG4gICAgfSlcblxuICAgIGF3YWl0IGRiLmRlbGV0ZUJyb2FkY2FzdE91dGJveChzY2hlZHVsZVVzZXIsIHNjaGVkdWxlSWQpXG4gICAgYXdhaXQgZGIuaW5jcmVhc2VCcm9hZGNhc3RTZW50Q291bnQoc2NoZWR1bGVJZClcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUZhaWxlZFNlbmRpbmcgPSBhc3luYyAoZXJyOiBFcnJvciwgc2NoZWR1bGVJZDogbnVtYmVyKSA9PiB7XG4gICAgYnAubG9nZ2VyLmVycm9yKGBCcm9hZGNhc3QgIyR7c2NoZWR1bGVJZH0nIGZhaWxlZC4gQnJvYWRjYXN0IGFib3J0ZWQuIFJlYXNvbjogJHtlcnIubWVzc2FnZX1gKVxuXG4gICAgYXdhaXQgYnAubm90aWZpY2F0aW9ucy5jcmVhdGUoYm90SWQsIHtcbiAgICAgIGJvdElkLFxuICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICBtZXNzYWdlOiAnQnJvYWRjYXN0ICMnICsgc2NoZWR1bGVJZCArICcgZmFpbGVkLicgKyAnIFBsZWFzZSBjaGVjayBsb2dzIGZvciB0aGUgcmVhc29uIHdoeS4nXG4gICAgfSlcblxuICAgIGF3YWl0IGRiLnVwZGF0ZUVycm9yRmllbGQoc2NoZWR1bGVJZClcbiAgICBhd2FpdCBkYi5kZWxldGVCcm9hZGNhc3RPdXRib3hCeUlkKHNjaGVkdWxlSWQpXG4gIH1cblxuICBjb25zdCBzY2hlZHVsZVRvT3V0Ym94ID0gYXN5bmMgKGJvdElkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzY2hlZHVsaW5nTG9jayA9IGF3YWl0IGJwLmRpc3RyaWJ1dGVkLmFjcXVpcmVMb2NrKGBicm9hZGNhc3QvbG9jay9zY2hlZHVsaW5nXyR7Ym90SWR9YCwgbXMoJzVtJykpXG4gICAgaWYgKCFzY2hlZHVsaW5nTG9jaykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGluRml2ZU1pbnV0ZXMgPSBtb21lbnQoKVxuICAgICAgICAuYWRkKDUsICdtaW51dGVzJylcbiAgICAgICAgLnRvRGF0ZSgpXG4gICAgICBjb25zdCBlbmRPZkRheSA9IG1vbWVudChpbkZpdmVNaW51dGVzKVxuICAgICAgICAuYWRkKDE0LCAnaG91cnMnKVxuICAgICAgICAudG9EYXRlKClcblxuICAgICAgY29uc3QgdXBjb21pbmdGaXhlZFRpbWUgPSBkYi5rbmV4LmRhdGUuaXNBZnRlcihpbkZpdmVNaW51dGVzLCAndHMnKVxuICAgICAgY29uc3QgdXBjb21pbmdWYXJpYWJsZVRpbWUgPSBkYi5rbmV4LmRhdGUuaXNBZnRlcihlbmRPZkRheSwgJ2RhdGVfdGltZScpXG5cbiAgICAgIGNvbnN0IHNjaGVkdWxlcyA9IGF3YWl0IGRiLmdldEJyb2FkY2FzdFNjaGVkdWxlc0J5VGltZShib3RJZCwgdXBjb21pbmdGaXhlZFRpbWUsIHVwY29taW5nVmFyaWFibGVUaW1lKVxuXG4gICAgICBhd2FpdCBQcm9taXNlLm1hcChzY2hlZHVsZXMsIGFzeW5jIHNjaGVkdWxlID0+IHtcbiAgICAgICAgY29uc3QgdGltZXpvbmVzID0gYXdhaXQgZGIuZ2V0VXNlcnNUaW1lem9uZSgpXG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5tYXBTZXJpZXModGltZXpvbmVzLCBhc3luYyB0eiA9PiB7XG4gICAgICAgICAgYXdhaXQgZGIuc2V0QnJvYWRjYXN0T3V0Ym94KGJvdElkLCBzY2hlZHVsZSwgdHopXG5cbiAgICAgICAgICBjb25zdCBjb3VudCA9IGF3YWl0IGRiLmdldE91dGJveENvdW50KGJvdElkLCBzY2hlZHVsZSlcbiAgICAgICAgICBhd2FpdCBkYi51cGRhdGVUb3RhbENvdW50KHNjaGVkdWxlLCBjb3VudClcblxuICAgICAgICAgIGJwLmxvZ2dlci5pbmZvKCdTY2hlZHVsZWQgYnJvYWRjYXN0ICMnICsgc2NoZWR1bGUuaWQsICcuIFsnICsgY291bnQgKyAnIG1lc3NhZ2VzXScpXG5cbiAgICAgICAgICBpZiAoc2NoZWR1bGUuZmlsdGVycyAmJiBKU09OLnBhcnNlKHNjaGVkdWxlLmZpbHRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGJwLmxvZ2dlci5pbmZvKGBGaWx0ZXJzIGZvdW5kIG9uIGJyb2FkY2FzdCAjJHtzY2hlZHVsZS5pZH0uIEZpbHRlcnMgYXJlIGFwcGxpZWQgYXQgc2VuZGluZyB0aW1lLmApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZW1pdENoYW5nZWQoKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYXdhaXQgc2NoZWR1bGluZ0xvY2sudW5sb2NrKClcbiAgICB9XG4gIH1cblxuICBjb25zdCBzZW5kQnJvYWRjYXN0cyA9IGFzeW5jIChib3RJZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlbmRpbmdMb2NrID0gYXdhaXQgYnAuZGlzdHJpYnV0ZWQuYWNxdWlyZUxvY2soYGJyb2FkY2FzdC9sb2NrL3NlbmRpbmdfJHtib3RJZH1gLCBtcygnNW0nKSlcbiAgICAgIGlmICghc2VuZGluZ0xvY2spIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJyb2FkY2FzdHMgPSBhd2FpdCBkYi5nZXRCcm9hZGNhc3RPdXRib3goYm90SWQpXG4gICAgICAgIGxldCBhYm9ydCA9IGZhbHNlXG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5tYXBTZXJpZXMoYnJvYWRjYXN0cywgYXN5bmMgKGJyb2FkY2FzdDogQnJvYWRjYXN0KSA9PiB7XG4gICAgICAgICAgaWYgKGFib3J0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdHJ5U2VuZEJyb2FkY2FzdChicm9hZGNhc3QpXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBhYm9ydCA9IHRydWVcblxuICAgICAgICAgICAgYXdhaXQgaGFuZGxlRmFpbGVkU2VuZGluZyhlcnIsIGJyb2FkY2FzdC5zY2hlZHVsZUlkKVxuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbWl0Q2hhbmdlZCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYXdhaXQgc2VuZGluZ0xvY2sudW5sb2NrKClcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYnAubG9nZ2VyLmVycm9yKCdCcm9hZGNhc3Qgc2VuZGluZyBlcnJvcjogJywgZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICBzZXRJbnRlcnZhbChzY2hlZHVsZVRvT3V0Ym94LmJpbmQodW5kZWZpbmVkLCBib3RJZCksIFNDSEVEVUxFX1RPX09VVEJPWF9JTlRFUlZBTClcbiAgc2V0SW50ZXJ2YWwoc2VuZEJyb2FkY2FzdHMuYmluZCh1bmRlZmluZWQsIGJvdElkKSwgU0VORF9CUk9BRENBU1RfSU5URVJWQUwpXG59XG4iXX0=