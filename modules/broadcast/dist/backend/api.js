"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _http = require("common/http");

var _default = async (bp, db) => {
  const asyncMiddleware = (0, _http.asyncMiddleware)(bp.logger);
  const router = bp.http.createRouterForBot('broadcast');
  router.get('/', asyncMiddleware(async (req, res) => {
    const schedules = await db.listSchedules(req.params.botId);
    const broadcasts = schedules.map(row => {
      const [date, time] = row.date_time.split(' ');
      const progress = row.total_count ? row.sent_count / row.total_count : db.knex.bool.parse(row.outboxed) ? 1 : 0;
      return {
        type: row.type,
        content: row.text,
        outboxed: db.knex.bool.parse(row.outboxed),
        errored: db.knex.bool.parse(row.errored),
        progress: progress,
        userTimezone: !row.ts,
        date: date,
        time: time,
        id: row.id,
        filteringConditions: row.filters && JSON.parse(row.filters)
      };
    });
    res.send(broadcasts);
  }));
  router.post('/create', asyncMiddleware(async (req, res) => {
    const {
      date,
      time,
      timezone,
      content,
      type,
      filters
    } = req.body;
    const {
      botId
    } = req.params;
    await db.addSchedule({
      botId,
      date,
      time,
      timezone,
      content,
      type,
      filters
    });
    res.sendStatus(200);
  }));
  router.post('/update', asyncMiddleware(async (req, res) => {
    const {
      id,
      date,
      time,
      timezone,
      content,
      type,
      filters
    } = req.body;
    const {
      botId
    } = req.params;
    await db.updateSchedule({
      id,
      date,
      time,
      timezone,
      content,
      type,
      filters,
      botId
    });
    res.sendStatus(200);
  }));
  router.post('/delete/:id', asyncMiddleware(async (req, res) => {
    await db.deleteSchedule(req.params.id);
    res.sendStatus(200);
  }));
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS50cyJdLCJuYW1lcyI6WyJicCIsImRiIiwiYXN5bmNNaWRkbGV3YXJlIiwibG9nZ2VyIiwicm91dGVyIiwiaHR0cCIsImNyZWF0ZVJvdXRlckZvckJvdCIsImdldCIsInJlcSIsInJlcyIsInNjaGVkdWxlcyIsImxpc3RTY2hlZHVsZXMiLCJwYXJhbXMiLCJib3RJZCIsImJyb2FkY2FzdHMiLCJtYXAiLCJyb3ciLCJkYXRlIiwidGltZSIsImRhdGVfdGltZSIsInNwbGl0IiwicHJvZ3Jlc3MiLCJ0b3RhbF9jb3VudCIsInNlbnRfY291bnQiLCJrbmV4IiwiYm9vbCIsInBhcnNlIiwib3V0Ym94ZWQiLCJ0eXBlIiwiY29udGVudCIsInRleHQiLCJlcnJvcmVkIiwidXNlclRpbWV6b25lIiwidHMiLCJpZCIsImZpbHRlcmluZ0NvbmRpdGlvbnMiLCJmaWx0ZXJzIiwiSlNPTiIsInNlbmQiLCJwb3N0IiwidGltZXpvbmUiLCJib2R5IiwiYWRkU2NoZWR1bGUiLCJzZW5kU3RhdHVzIiwidXBkYXRlU2NoZWR1bGUiLCJkZWxldGVTY2hlZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztlQUllLE9BQU9BLEVBQVAsRUFBdUJDLEVBQXZCLEtBQXdDO0FBQ3JELFFBQU1DLGVBQWUsR0FBRywyQkFBUUYsRUFBRSxDQUFDRyxNQUFYLENBQXhCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixFQUFFLENBQUNLLElBQUgsQ0FBUUMsa0JBQVIsQ0FBMkIsV0FBM0IsQ0FBZjtBQUVBRixFQUFBQSxNQUFNLENBQUNHLEdBQVAsQ0FDRSxHQURGLEVBRUVMLGVBQWUsQ0FBQyxPQUFPTSxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDbEMsVUFBTUMsU0FBUyxHQUFHLE1BQU1ULEVBQUUsQ0FBQ1UsYUFBSCxDQUFpQkgsR0FBRyxDQUFDSSxNQUFKLENBQVdDLEtBQTVCLENBQXhCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHSixTQUFTLENBQUNLLEdBQVYsQ0FBY0MsR0FBRyxJQUFJ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UUFBbEI7QUFBNEJYLE1BQUFBLE9BQTVCO0FBQXFDRCxNQUFBQSxJQUFyQztBQUEyQ1EsTUFBQUEsT0FBM0M7QUFBb0R2QixNQUFBQTtBQUFwRCxLQUFsQixDQUFOO0FBQ0FKLElBQUFBLEdBQUcsQ0FBQ2tDLFVBQUosQ0FBZSxHQUFmO0FBQ0QsR0FOYyxDQUZqQjtBQVdBdkMsRUFBQUEsTUFBTSxDQUFDbUMsSUFBUCxDQUNFLGFBREYsRUFFRXJDLGVBQWUsQ0FBQyxPQUFPTSxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDbEMsVUFBTVIsRUFBRSxDQUFDNEMsY0FBSCxDQUFrQnJDLEdBQUcsQ0FBQ0ksTUFBSixDQUFXc0IsRUFBN0IsQ0FBTjtBQUNBekIsSUFBQUEsR0FBRyxDQUFDa0MsVUFBSixDQUFlLEdBQWY7QUFDRCxHQUhjLENBRmpCO0FBT0QsQyIsInNvdXJjZVJvb3QiOiIvbW50L0RvY3VtZW50cy9Qcm9qZXRzL0JvdFByZXNzL2JvdHByZXNzL21vZHVsZXMvYnJvYWRjYXN0L3NyYy9iYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2RrIGZyb20gJ2JvdHByZXNzL3NkaydcbmltcG9ydCB7IGFzeW5jTWlkZGxld2FyZSBhcyBhc3luY013IH0gZnJvbSAnY29tbW9uL2h0dHAnXG5cbmltcG9ydCBEYXRhYmFzZSBmcm9tICcuL2RiJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoYnA6IHR5cGVvZiBzZGssIGRiOiBEYXRhYmFzZSkgPT4ge1xuICBjb25zdCBhc3luY01pZGRsZXdhcmUgPSBhc3luY013KGJwLmxvZ2dlcilcbiAgY29uc3Qgcm91dGVyID0gYnAuaHR0cC5jcmVhdGVSb3V0ZXJGb3JCb3QoJ2Jyb2FkY2FzdCcpXG5cbiAgcm91dGVyLmdldChcbiAgICAnLycsXG4gICAgYXN5bmNNaWRkbGV3YXJlKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc3Qgc2NoZWR1bGVzID0gYXdhaXQgZGIubGlzdFNjaGVkdWxlcyhyZXEucGFyYW1zLmJvdElkKVxuICAgICAgY29uc3QgYnJvYWRjYXN0cyA9IHNjaGVkdWxlcy5tYXAocm93ID0+IHtcbiAgICAgICAgY29uc3QgW2RhdGUsIHRpbWVdID0gcm93LmRhdGVfdGltZS5zcGxpdCgnICcpXG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gcm93LnRvdGFsX2NvdW50ID8gcm93LnNlbnRfY291bnQgLyByb3cudG90YWxfY291bnQgOiBkYi5rbmV4LmJvb2wucGFyc2Uocm93Lm91dGJveGVkKSA/IDEgOiAwXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiByb3cudHlwZSxcbiAgICAgICAgICBjb250ZW50OiByb3cudGV4dCxcbiAgICAgICAgICBvdXRib3hlZDogZGIua25leC5ib29sLnBhcnNlKHJvdy5vdXRib3hlZCksXG4gICAgICAgICAgZXJyb3JlZDogZGIua25leC5ib29sLnBhcnNlKHJvdy5lcnJvcmVkKSxcbiAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICAgICAgdXNlclRpbWV6b25lOiAhcm93LnRzLFxuICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgICBpZDogcm93LmlkLFxuICAgICAgICAgIGZpbHRlcmluZ0NvbmRpdGlvbnM6IHJvdy5maWx0ZXJzICYmIEpTT04ucGFyc2Uocm93LmZpbHRlcnMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXMuc2VuZChicm9hZGNhc3RzKVxuICAgIH0pXG4gIClcblxuICByb3V0ZXIucG9zdChcbiAgICAnL2NyZWF0ZScsXG4gICAgYXN5bmNNaWRkbGV3YXJlKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc3QgeyBkYXRlLCB0aW1lLCB0aW1lem9uZSwgY29udGVudCwgdHlwZSwgZmlsdGVycyB9ID0gcmVxLmJvZHlcbiAgICAgIGNvbnN0IHsgYm90SWQgfSA9IHJlcS5wYXJhbXNcblxuICAgICAgYXdhaXQgZGIuYWRkU2NoZWR1bGUoeyBib3RJZCwgZGF0ZSwgdGltZSwgdGltZXpvbmUsIGNvbnRlbnQsIHR5cGUsIGZpbHRlcnMgfSlcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDIwMClcbiAgICB9KVxuICApXG5cbiAgcm91dGVyLnBvc3QoXG4gICAgJy91cGRhdGUnLFxuICAgIGFzeW5jTWlkZGxld2FyZShhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IHsgaWQsIGRhdGUsIHRpbWUsIHRpbWV6b25lLCBjb250ZW50LCB0eXBlLCBmaWx0ZXJzIH0gPSByZXEuYm9keVxuICAgICAgY29uc3QgeyBib3RJZCB9ID0gcmVxLnBhcmFtc1xuXG4gICAgICBhd2FpdCBkYi51cGRhdGVTY2hlZHVsZSh7IGlkLCBkYXRlLCB0aW1lLCB0aW1lem9uZSwgY29udGVudCwgdHlwZSwgZmlsdGVycywgYm90SWQgfSlcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDIwMClcbiAgICB9KVxuICApXG5cbiAgcm91dGVyLnBvc3QoXG4gICAgJy9kZWxldGUvOmlkJyxcbiAgICBhc3luY01pZGRsZXdhcmUoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBhd2FpdCBkYi5kZWxldGVTY2hlZHVsZShyZXEucGFyYW1zLmlkKVxuICAgICAgcmVzLnNlbmRTdGF0dXMoMjAwKVxuICAgIH0pXG4gIClcbn1cbiJdfQ==