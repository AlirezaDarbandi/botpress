

--------------------
Changes: Initial
--------------------


Starting botpress | Sat  5 Dec 2020 17:19:39 EST

BEFORE MEMORY
rss 182.95 MB
heapTotal 111.84 MB
heapUsed 82.42 MB
external 36.96 MB
Starting warmup | Sat  5 Dec 2020 17:19:50 EST
Warmup done | Sat  5 Dec 2020 17:20:01 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:20:14 EST
Sending requests | Sat  5 Dec 2020 17:20:16 EST
Requests done | Sat  5 Dec 2020 17:20:27 EST
Finishing snapshot | Sat  5 Dec 2020 17:20:42 EST

LEAK SIZE: -268.2 kb
Big diff: Object [1093 new] --> 48.04 kb
Big diff: String [827 new] --> 40.3 kb


GC collected

FINAL MEMORY
rss 304.09 MB
heapTotal 74.98 MB
heapUsed 67.58 MB
external 3.83 MB



--------------------
Changes: Changed run script
--------------------


GIT DIFF


diff --git a/memory/run.sh b/memory/run.sh
index 98c5fd490..1d72cdc0e 100755
--- a/memory/run.sh
+++ b/memory/run.sh
@@ -13,6 +13,13 @@ echo "Changes: $changes" >> logs.txt
 echo "--------------------" >> logs.txt
 echo "" >> logs.txt
 echo "" >> logs.txt
+echo "GIT DIFF" >> logs.txt
+echo "" >> logs.txt
+echo "" >> logs.txt
+
+git diff >> logs.txt
+git add -A
+git commit -m "run - $changes"
 
 echo "Starting botpress..."
 echo "Starting botpress | $(date)" >> logs.txt
Starting botpress | Sat  5 Dec 2020 17:24:42 EST

BEFORE MEMORY
rss 215.54 MB
heapTotal 114.18 MB
heapUsed 84.91 MB
external 48.37 MB
Starting warmup | Sat  5 Dec 2020 17:24:52 EST
Warmup done | Sat  5 Dec 2020 17:25:03 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:25:16 EST
Sending requests | Sat  5 Dec 2020 17:25:18 EST
Requests done | Sat  5 Dec 2020 17:25:29 EST
Finishing snapshot | Sat  5 Dec 2020 17:25:44 EST

LEAK SIZE: -130.13 kb
Big diff: Object [1090 new] --> 47.91 kb
Big diff: String [997 new] --> 46.04 kb


GC collected

FINAL MEMORY
rss 292.22 MB
heapTotal 75.48 MB
heapUsed 67.52 MB
external 3.83 MB



--------------------
Changes: Run script
--------------------


GIT DIFF


diff --git a/src/bp/core/routers/bots/converse.ts b/src/bp/core/routers/bots/converse.ts
index 0e777799d..f99cc28a9 100644
--- a/src/bp/core/routers/bots/converse.ts
+++ b/src/bp/core/routers/bots/converse.ts
@@ -126,7 +126,7 @@ export class ConverseRouter extends CustomRouter {
 
     if (!parts.includes('nlu')) {
       delete output.nlu
-    }
+    } //
 
     if (!parts.includes('state')) {
       delete output.state
Starting botpress | Sat  5 Dec 2020 17:35:07 EST

BEFORE MEMORY
rss 179.65 MB
heapTotal 108.61 MB
heapUsed 73.64 MB
external 29.94 MB
Starting warmup | Sat  5 Dec 2020 17:35:17 EST
Warmup done | Sat  5 Dec 2020 17:35:29 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:35:42 EST
Sending requests | Sat  5 Dec 2020 17:35:44 EST
Requests done | Sat  5 Dec 2020 17:35:55 EST
Finishing snapshot | Sat  5 Dec 2020 17:36:10 EST

LEAK SIZE: 218.16 kb
Big diff: Object [1142 new] --> 50.34 kb
Big diff: String [1104 new] --> 49.73 kb


GC collected

FINAL MEMORY
rss 286.3 MB
heapTotal 74.73 MB
heapUsed 67.54 MB
external 3.83 MB



--------------------
Changes: Not calling converse
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 17:37:57 EST

BEFORE MEMORY
rss 179.71 MB
heapTotal 108.36 MB
heapUsed 73.52 MB
external 29.86 MB
Starting warmup | Sat  5 Dec 2020 17:38:08 EST
Warmup done | Sat  5 Dec 2020 17:38:19 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:38:32 EST
Sending requests | Sat  5 Dec 2020 17:38:34 EST
Requests done | Sat  5 Dec 2020 17:38:45 EST
Finishing snapshot | Sat  5 Dec 2020 17:39:00 EST

LEAK SIZE: -95.38 kb


GC collected

FINAL MEMORY
rss 253.47 MB
heapTotal 71.86 MB
heapUsed 66.36 MB
external 3.81 MB



--------------------
Changes: renderTemplate
--------------------


GIT DIFF


diff --git a/src/bp/core/misc/templating.ts b/src/bp/core/misc/templating.ts
index df1cbfcee..bdcfa3b78 100644
--- a/src/bp/core/misc/templating.ts
+++ b/src/bp/core/misc/templating.ts
@@ -10,8 +10,7 @@ export function renderRecursive(item: TemplateItem, context: any): any {
   } else if (typeof item === 'object') {
     return _.mapValues(item, val => renderRecursive(val, context))
   } else if (typeof item === 'string') {
-    return item
-    // return renderTemplate(item, context)
+    return renderTemplate(item, context)
   } else {
     return item
   }
Starting botpress | Sat  5 Dec 2020 17:43:17 EST

BEFORE MEMORY
rss 181.18 MB
heapTotal 109.11 MB
heapUsed 73.55 MB
external 29.86 MB
Starting warmup | Sat  5 Dec 2020 17:43:28 EST
Warmup done | Sat  5 Dec 2020 17:43:39 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:43:52 EST
Sending requests | Sat  5 Dec 2020 17:43:54 EST
Requests done | Sat  5 Dec 2020 17:44:05 EST
Finishing snapshot | Sat  5 Dec 2020 17:44:20 EST

LEAK SIZE: -1.35 mb
Big diff: Object [1066 new] --> 46.81 kb


GC collected

FINAL MEMORY
rss 284.36 MB
heapTotal 74.73 MB
heapUsed 67.54 MB
external 3.83 MB



--------------------
Changes: re-running actions
--------------------


GIT DIFF


diff --git a/src/bp/core/services/action/action-service.ts b/src/bp/core/services/action/action-service.ts
index 38b82a753..7f34ded8d 100644
--- a/src/bp/core/services/action/action-service.ts
+++ b/src/bp/core/services/action/action-service.ts
@@ -307,8 +307,6 @@ export class ScopedActionService {
       process: UntrustedSandbox.getSandboxProcessArgs()
     })
 
-    return this._runWithoutVm(code, { bp: await createForAction(), ...args }, _require)
-
     switch (runType) {
       case 'trusted': {
         // bp is created here because it cannot be created in the Local Action Server thread
Starting botpress | Sat  5 Dec 2020 17:45:27 EST

BEFORE MEMORY
rss 179.71 MB
heapTotal 108.61 MB
heapUsed 73.57 MB
external 29.88 MB
Starting warmup | Sat  5 Dec 2020 17:45:37 EST
Warmup done | Sat  5 Dec 2020 17:45:48 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:46:01 EST
Sending requests | Sat  5 Dec 2020 17:46:03 EST
Requests done | Sat  5 Dec 2020 17:46:14 EST
Finishing snapshot | Sat  5 Dec 2020 17:46:29 EST

LEAK SIZE: 219.29 kb
Big diff: Array [143 new] --> 138 kb
Big diff: Object [1142 new] --> 50.31 kb
Big diff: String [1136 new] --> 50.77 kb


GC collected

FINAL MEMORY
rss 301.26 MB
heapTotal 74.98 MB
heapUsed 67.55 MB
external 3.83 MB



--------------------
Changes: CMS removed all clone deep etc
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 17:48:04 EST

BEFORE MEMORY
rss 180.59 MB
heapTotal 110.11 MB
heapUsed 73.43 MB
external 3.82 MB
Starting warmup | Sat  5 Dec 2020 17:48:14 EST
Warmup done | Sat  5 Dec 2020 17:48:25 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:48:38 EST
Sending requests | Sat  5 Dec 2020 17:48:40 EST
Requests done | Sat  5 Dec 2020 17:48:51 EST
Finishing snapshot | Sat  5 Dec 2020 17:49:06 EST

LEAK SIZE: 172.98 kb
Big diff: Array [127 new] --> 103.65 kb
Big diff: Object [1142 new] --> 50.34 kb
Big diff: String [1141 new] --> 50.92 kb


GC collected

FINAL MEMORY
rss 294.22 MB
heapTotal 74.98 MB
heapUsed 67.51 MB
external 3.83 MB



--------------------
Changes: dialog instructions restore
--------------------


GIT DIFF


diff --git a/src/bp/core/services/dialog/instruction/strategy.ts b/src/bp/core/services/dialog/instruction/strategy.ts
index 40f7b9d54..89c43f707 100644
--- a/src/bp/core/services/dialog/instruction/strategy.ts
+++ b/src/bp/core/services/dialog/instruction/strategy.ts
@@ -86,12 +86,12 @@ export class ActionStrategy implements InstructionStrategy {
     }
 
     args = {
-      ...args
-      // event,
-      // user: _.get(event, 'state.user', {}),
-      // session: _.get(event, 'state.session', {}),
-      // temp: _.get(event, 'state.temp', {}),
-      // bot: _.get(event, 'state.bot', {})
+      ...args,
+      event,
+      user: _.get(event, 'state.user', {}),
+      session: _.get(event, 'state.session', {}),
+      temp: _.get(event, 'state.temp', {}),
+      bot: _.get(event, 'state.bot', {})
     }
 
     const eventDestination = _.pick(event, ['channel', 'target', 'botId', 'threadId'])
@@ -102,58 +102,57 @@ export class ActionStrategy implements InstructionStrategy {
   }
 
   private async invokeAction(botId, instruction, event: IO.IncomingEvent): Promise<ProcessingResult> {
+    const { actionName, argsStr, actionServerId } = parseActionInstruction(instruction.fn)
+
+    let args: { [key: string]: any } = {}
+    try {
+      if (argsStr && argsStr.length) {
+        args = JSON.parse(argsStr)
+      }
+    } catch (err) {
+      throw new Error(`Action "${actionName}" has invalid arguments (not a valid JSON string): ${argsStr}`)
+    }
+
+    const actionArgs = {
+      event,
+      user: _.get(event, 'state.user', {}),
+      session: _.get(event, 'state.session', {}),
+      temp: _.get(event, 'state.temp', {}),
+      bot: _.get(event, 'state.bot', {})
+    }
+
+    args = _.mapValues(args, value => renderTemplate(value, actionArgs))
+
+    let actionServer: ActionServer | undefined
+    if (actionServerId) {
+      actionServer = await this.actionServersService.getServer(actionServerId)
+      if (!actionServer) {
+        this.logger.warn(`Could not find Action Server with ID: ${actionServerId}`)
+        return ProcessingResult.none()
+      }
+    }
+
+    debug.forBot(botId, `[${event.target}] execute action "${actionName}"`)
+
+    const service = await this.actionService.forBot(botId)
+
+    try {
+      if (!actionServerId) {
+        const hasAction = await service.hasAction(actionName)
+        if (!hasAction) {
+          throw new Error(`Action "${actionName}" not found, `)
+        }
+      }
+
+      await service.runAction({ actionName, incomingEvent: event, actionArgs: args, actionServer })
+    } catch (err) {
+      const { onErrorFlowTo } = event.state.temp
+      const errorFlow = typeof onErrorFlowTo === 'string' && onErrorFlowTo.length ? onErrorFlowTo : 'error.flow.json'
+
+      return ProcessingResult.transition(errorFlow)
+    }
+
     return ProcessingResult.none()
-    // // // const { actionName, argsStr, actionServerId } = parseActionInstruction(instruction.fn)
-
-    // // // let args: { [key: string]: any } = {}
-    // // // try {
-    // // //   if (argsStr && argsStr.length) {
-    // // //     args = JSON.parse(argsStr)
-    // // //   }
-    // // // } catch (err) {
-    // // //   throw new Error(`Action "${actionName}" has invalid arguments (not a valid JSON string): ${argsStr}`)
-    // // // }
-
-    // // // const actionArgs = {
-    // // //   event,
-    // // //   user: _.get(event, 'state.user', {}),
-    // // //   session: _.get(event, 'state.session', {}),
-    // // //   temp: _.get(event, 'state.temp', {}),
-    // // //   bot: _.get(event, 'state.bot', {})
-    // // // }
-
-    // // // args = _.mapValues(args, value => renderTemplate(value, actionArgs))
-
-    // // // let actionServer: ActionServer | undefined
-    // // // if (actionServerId) {
-    // // //   actionServer = await this.actionServersService.getServer(actionServerId)
-    // // //   if (!actionServer) {
-    // // //     this.logger.warn(`Could not find Action Server with ID: ${actionServerId}`)
-    // // //     return ProcessingResult.none()
-    // // //   }
-    // // // }
-
-    // // // debug.forBot(botId, `[${event.target}] execute action "${actionName}"`)
-
-    // // // const service = await this.actionService.forBot(botId)
-
-    // // // try {
-    // // //   if (!actionServerId) {
-    // // //     const hasAction = await service.hasAction(actionName)
-    // // //     if (!hasAction) {
-    // // //       throw new Error(`Action "${actionName}" not found, `)
-    // // //     }
-    // // //   }
-
-    // // //   await service.runAction({ actionName, incomingEvent: event, actionArgs: args, actionServer })
-    // // // } catch (err) {
-    // // //   const { onErrorFlowTo } = event.state.temp
-    // // //   const errorFlow = typeof onErrorFlowTo === 'string' && onErrorFlowTo.length ? onErrorFlowTo : 'error.flow.json'
-
-    // // //   return ProcessingResult.transition(errorFlow)
-    // // }
-
-    // return ProcessingResult.none()
   }
 }
 
@@ -171,12 +170,12 @@ export class TransitionStrategy implements InstructionStrategy {
     })
 
     if (conditionSuccessful) {
-      // debug.forBot(
-      //   botId,
-      //   `[${event.target}] eval transition "${instruction.fn === 'true' ? 'always' : instruction.fn}" to [${
-      //     instruction.node
-      //   }]`
-      // )
+      debug.forBot(
+        botId,
+        `[${event.target}] eval transition "${instruction.fn === 'true' ? 'always' : instruction.fn}" to [${
+          instruction.node
+        }]`
+      )
       return ProcessingResult.transition(instruction.node)
     } else {
       return ProcessingResult.none()
diff --git a/src/bp/index.ts b/src/bp/index.ts
index 4e65f0c46..bc0e1f7b8 100644
--- a/src/bp/index.ts
+++ b/src/bp/index.ts
@@ -48,9 +48,7 @@ if (process.env.APP_DATA_PATH) {
 process.IS_FAILSAFE = yn(process.env.BP_FAILSAFE)
 process.BOTPRESS_EVENTS = new EventEmitter()
 process.BOTPRESS_EVENTS.setMaxListeners(1000)
-global.BOTPRESS_CORE_EVENT = (event, args) => {
-  /* noop */
-}
+global.BOTPRESS_CORE_EVENT = (event, args) => process.BOTPRESS_EVENTS.emit(event, args)
 
 process.LOADED_MODULES = {}
 process.PROJECT_LOCATION = process.pkg
Starting botpress | Sat  5 Dec 2020 17:54:03 EST

BEFORE MEMORY
rss 181.72 MB
heapTotal 110.61 MB
heapUsed 73.45 MB
external 3.82 MB
Starting warmup | Sat  5 Dec 2020 17:54:14 EST
Warmup done | Sat  5 Dec 2020 17:54:25 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:54:38 EST
Sending requests | Sat  5 Dec 2020 17:54:40 EST
Requests done | Sat  5 Dec 2020 17:54:51 EST
Finishing snapshot | Sat  5 Dec 2020 17:55:06 EST

LEAK SIZE: 814.02 kb
Big diff: Array [807 new] --> 220.41 kb
Big diff: Code [77 new] --> 177.38 kb
Big diff: Object [1196 new] --> 52.95 kb
Big diff: String [1200 new] --> 53.96 kb


GC collected

FINAL MEMORY
rss 302.77 MB
heapTotal 75.41 MB
heapUsed 68.14 MB
external 3.83 MB



--------------------
Changes: last run isolation, diasable botpress core event
--------------------


GIT DIFF


diff --git a/src/bp/index.ts b/src/bp/index.ts
index bc0e1f7b8..4e65f0c46 100644
--- a/src/bp/index.ts
+++ b/src/bp/index.ts
@@ -48,7 +48,9 @@ if (process.env.APP_DATA_PATH) {
 process.IS_FAILSAFE = yn(process.env.BP_FAILSAFE)
 process.BOTPRESS_EVENTS = new EventEmitter()
 process.BOTPRESS_EVENTS.setMaxListeners(1000)
-global.BOTPRESS_CORE_EVENT = (event, args) => process.BOTPRESS_EVENTS.emit(event, args)
+global.BOTPRESS_CORE_EVENT = (event, args) => {
+  /* noop */
+}
 
 process.LOADED_MODULES = {}
 process.PROJECT_LOCATION = process.pkg
Starting botpress | Sat  5 Dec 2020 17:56:41 EST

BEFORE MEMORY
rss 182.2 MB
heapTotal 111.68 MB
heapUsed 82.8 MB
external 37.11 MB
Starting warmup | Sat  5 Dec 2020 17:56:51 EST
Warmup done | Sat  5 Dec 2020 17:57:03 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 17:57:16 EST
Sending requests | Sat  5 Dec 2020 17:57:18 EST
Requests done | Sat  5 Dec 2020 17:57:29 EST
Finishing snapshot | Sat  5 Dec 2020 17:57:44 EST

LEAK SIZE: 911.34 kb
Big diff: Array [707 new] --> 232.86 kb
Big diff: Code [94 new] --> 226.58 kb
Big diff: Object [1214 new] --> 53.76 kb
Big diff: String [1204 new] --> 54.95 kb


GC collected

FINAL MEMORY
rss 300.98 MB
heapTotal 75.66 MB
heapUsed 68.18 MB
external 3.83 MB



--------------------
Changes: will abort, cleam up comments
--------------------


GIT DIFF


diff --git a/src/bp/core/misc/code-sandbox.ts b/src/bp/core/misc/code-sandbox.ts
index 3396d4f57..f4cc19bb0 100644
--- a/src/bp/core/misc/code-sandbox.ts
+++ b/src/bp/core/misc/code-sandbox.ts
@@ -37,7 +37,7 @@ export class SafeCodeSandbox {
       compiler: 'javascript',
       sandbox: {},
       timeout: 1000,
-      console: 'off',
+      console: 'redirect',
       sourceExtensions: ['js'],
       nesting: false,
       require: {
@@ -49,21 +49,21 @@ export class SafeCodeSandbox {
       }
     })
 
-    // this.vm.freeze(_, '_')
-
-    // const listen = this.vm['on'].bind(this.vm)
-    // listen('console.log', (...args) => {
-    //   logger && logger.debug(args[0], _.tail(args))
-    // })
-    // listen('console.info', (...args) => {
-    //   logger && logger.info(args[0], _.tail(args))
-    // })
-    // listen('console.warn', (...args) => {
-    //   logger && logger.warn(args[0], _.tail(args))
-    // })
-    // listen('console.error', (...args) => {
-    //   logger && logger.error(args[0], _.tail(args))
-    // })
+    this.vm.freeze(_, '_')
+
+    const listen = this.vm['on'].bind(this.vm)
+    listen('console.log', (...args) => {
+      logger && logger.debug(args[0], _.tail(args))
+    })
+    listen('console.info', (...args) => {
+      logger && logger.info(args[0], _.tail(args))
+    })
+    listen('console.warn', (...args) => {
+      logger && logger.warn(args[0], _.tail(args))
+    })
+    listen('console.error', (...args) => {
+      logger && logger.error(args[0], _.tail(args))
+    })
   }
 
   ls(): string[] {
diff --git a/src/bp/index.ts b/src/bp/index.ts
index 4e65f0c46..bc0e1f7b8 100644
--- a/src/bp/index.ts
+++ b/src/bp/index.ts
@@ -48,9 +48,7 @@ if (process.env.APP_DATA_PATH) {
 process.IS_FAILSAFE = yn(process.env.BP_FAILSAFE)
 process.BOTPRESS_EVENTS = new EventEmitter()
 process.BOTPRESS_EVENTS.setMaxListeners(1000)
-global.BOTPRESS_CORE_EVENT = (event, args) => {
-  /* noop */
-}
+global.BOTPRESS_CORE_EVENT = (event, args) => process.BOTPRESS_EVENTS.emit(event, args)
 
 process.LOADED_MODULES = {}
 process.PROJECT_LOCATION = process.pkg
Starting botpress | Sat  5 Dec 2020 18:00:30 EST


--------------------
Changes: restored event lifecycle hooks
--------------------


GIT DIFF


diff --git a/src/bp/core/botpress.ts b/src/bp/core/botpress.ts
index 18495a100..d78102d94 100644
--- a/src/bp/core/botpress.ts
+++ b/src/bp/core/botpress.ts
@@ -354,45 +354,45 @@ export class Botpress {
     this.eventEngine.onBeforeIncomingMiddleware = async (event: sdk.IO.IncomingEvent) => {
       await this.stateManager.restore(event)
       addStepToEvent(event, StepScopes.StateLoaded)
-      // await this.hookService.executeHook(new Hooks.BeforeIncomingMiddleware(this.api, event))
+      await this.hookService.executeHook(new Hooks.BeforeIncomingMiddleware(this.api, event))
     }
 
     this.eventEngine.onAfterIncomingMiddleware = async (event: sdk.IO.IncomingEvent) => {
-      // if (event.isPause) {
-      //   return
-      // }
+      if (event.isPause) {
+        return
+      }
 
-      // if (event.ndu && event.type === 'workflow_ended') {
-      //   const hasWorkflowEndedTrigger = Object.keys(event.ndu.triggers).find(
-      //     x => event.ndu?.triggers[x].result['workflow_ended'] === 1
-      //   )
+      if (event.ndu && event.type === 'workflow_ended') {
+        const hasWorkflowEndedTrigger = Object.keys(event.ndu.triggers).find(
+          x => event.ndu?.triggers[x].result['workflow_ended'] === 1
+        )
 
-      //   if (!hasWorkflowEndedTrigger) {
-      //     event.setFlag(WellKnownFlags.SKIP_DIALOG_ENGINE, true)
-      //   }
-      // }
+        if (!hasWorkflowEndedTrigger) {
+          event.setFlag(WellKnownFlags.SKIP_DIALOG_ENGINE, true)
+        }
+      }
 
-      // await this.hookService.executeHook(new Hooks.AfterIncomingMiddleware(this.api, event))
+      await this.hookService.executeHook(new Hooks.AfterIncomingMiddleware(this.api, event))
       const sessionId = SessionIdFactory.createIdFromEvent(event)
 
-      // if (event.debugger) {
-      //   addStepToEvent(event, StepScopes.Dialog, StepStatus.Started)
-      //   this.eventCollector.storeEvent(event)
-      // }
+      if (event.debugger) {
+        addStepToEvent(event, StepScopes.Dialog, StepStatus.Started)
+        this.eventCollector.storeEvent(event)
+      }
 
       await this.decisionEngine.processEvent(sessionId, event)
 
-      // if (event.debugger) {
-      //   addStepToEvent(event, StepScopes.EndProcessing)
-      //   this.eventCollector.storeEvent(event)
-      // }
+      if (event.debugger) {
+        addStepToEvent(event, StepScopes.EndProcessing)
+        this.eventCollector.storeEvent(event)
+      }
 
       // await converseApiEvents.emitAsync(`done.${buildUserKey(event.botId, event.target)}`, event)
     }
 
     this.eventEngine.onBeforeOutgoingMiddleware = async (event: sdk.IO.IncomingEvent) => {
       this.eventCollector.storeEvent(event)
-      // await this.hookService.executeHook(new Hooks.BeforeOutgoingMiddleware(this.api, event))
+      await this.hookService.executeHook(new Hooks.BeforeOutgoingMiddleware(this.api, event))
     }
 
     this.decisionEngine.onBeforeSuggestionsElection = async (
@@ -400,14 +400,14 @@ export class Botpress {
       event: sdk.IO.IncomingEvent,
       suggestions: sdk.IO.Suggestion[]
     ) => {
-      // await this.hookService.executeHook(new Hooks.BeforeSuggestionsElection(this.api, sessionId, event, suggestions))
+      await this.hookService.executeHook(new Hooks.BeforeSuggestionsElection(this.api, sessionId, event, suggestions))
     }
 
     this.decisionEngine.onAfterEventProcessed = async (event: sdk.IO.IncomingEvent) => {
-      // if (!event.ndu) {
-      //   this.eventCollector.storeEvent(event)
-      //   // return this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
-      // }
+      if (!event.ndu) {
+        // this.eventCollector.storeEvent(event)
+        return this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
+      }
 
       const { workflows } = event.state.session
 
@@ -415,7 +415,7 @@ export class Botpress {
       const completedWorkflows = Object.keys(workflows).filter(x => workflows[x].status === 'completed')
 
       // this.eventCollector.storeEvent(event, activeWorkflow ? workflows[activeWorkflow] : undefined)
-      // await this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
+      await this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
 
       // completedWorkflows.forEach(async workflow => {
       //   const wf = workflows[workflow]
@@ -438,7 +438,7 @@ export class Botpress {
     }
 
     this.botMonitor.onBotError = async (botId: string, events: sdk.LoggerEntry[]) => {
-      // await this.hookService.executeHook(new Hooks.OnBotError(this.api, botId, events))
+      await this.hookService.executeHook(new Hooks.OnBotError(this.api, botId, events))
     }
 
     await this.dataRetentionService.initialize()
Starting botpress | Sat  5 Dec 2020 18:03:23 EST

BEFORE MEMORY
rss 180.18 MB
heapTotal 108.86 MB
heapUsed 73.59 MB
external 29.86 MB
Starting warmup | Sat  5 Dec 2020 18:03:34 EST
Warmup done | Sat  5 Dec 2020 18:03:45 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:03:58 EST
Sending requests | Sat  5 Dec 2020 18:04:00 EST
Requests done | Sat  5 Dec 2020 18:04:12 EST
Finishing snapshot | Sat  5 Dec 2020 18:04:27 EST

LEAK SIZE: 719.3 kb
Big diff: Array [911 new] --> 219.73 kb
Big diff: Code [96 new] --> 165.55 kb
Big diff: Object [1399 new] --> 62.48 kb
Big diff: String [1223 new] --> 63.48 kb


GC collected

FINAL MEMORY
rss 287.86 MB
heapTotal 75.91 MB
heapUsed 68.29 MB
external 3.83 MB



--------------------
Changes: completed workflows
--------------------


GIT DIFF


diff --git a/src/bp/core/botpress.ts b/src/bp/core/botpress.ts
index d78102d94..e833774d7 100644
--- a/src/bp/core/botpress.ts
+++ b/src/bp/core/botpress.ts
@@ -417,24 +417,24 @@ export class Botpress {
       // this.eventCollector.storeEvent(event, activeWorkflow ? workflows[activeWorkflow] : undefined)
       await this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
 
-      // completedWorkflows.forEach(async workflow => {
-      //   const wf = workflows[workflow]
-      //   const metric = wf.success ? 'bp_core_workflow_completed' : 'bp_core_workflow_failed'
-      //   BOTPRESS_CORE_EVENT(metric, { botId: event.botId, channel: event.channel, wfName: workflow })
-
-      //   delete event.state.session.workflows[workflow]
-
-      //   if (!activeWorkflow && !wf.parent) {
-      //     await this.eventEngine.sendEvent(
-      //       Event({
-      //         ..._.pick(event, ['botId', 'channel', 'target', 'threadId']),
-      //         direction: 'incoming',
-      //         type: 'workflow_ended',
-      //         payload: { ...wf, workflow }
-      //       })
-      //     )
-      //   }
-      // })
+      completedWorkflows.forEach(async workflow => {
+        const wf = workflows[workflow]
+        const metric = wf.success ? 'bp_core_workflow_completed' : 'bp_core_workflow_failed'
+        BOTPRESS_CORE_EVENT(metric, { botId: event.botId, channel: event.channel, wfName: workflow })
+
+        delete event.state.session.workflows[workflow]
+
+        if (!activeWorkflow && !wf.parent) {
+          await this.eventEngine.sendEvent(
+            Event({
+              ..._.pick(event, ['botId', 'channel', 'target', 'threadId']),
+              direction: 'incoming',
+              type: 'workflow_ended',
+              payload: { ...wf, workflow }
+            })
+          )
+        }
+      })
     }
 
     this.botMonitor.onBotError = async (botId: string, events: sdk.LoggerEntry[]) => {
Starting botpress | Sat  5 Dec 2020 18:05:29 EST

BEFORE MEMORY
rss 189.17 MB
heapTotal 111.68 MB
heapUsed 84.77 MB
external 45.16 MB
Starting warmup | Sat  5 Dec 2020 18:05:39 EST
Warmup done | Sat  5 Dec 2020 18:05:50 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:06:04 EST
Sending requests | Sat  5 Dec 2020 18:06:06 EST
Requests done | Sat  5 Dec 2020 18:06:17 EST
Finishing snapshot | Sat  5 Dec 2020 18:06:32 EST

LEAK SIZE: -1.64 mb
Big diff: Object [1225 new] --> 54.46 kb


GC collected

FINAL MEMORY
rss 302.15 MB
heapTotal 76.66 MB
heapUsed 68.34 MB
external 3.83 MB



--------------------
Changes: re-running last run
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 18:07:51 EST

BEFORE MEMORY
rss 183.79 MB
heapTotal 111.68 MB
heapUsed 82.69 MB
external 37.09 MB
Starting warmup | Sat  5 Dec 2020 18:08:02 EST
Warmup done | Sat  5 Dec 2020 18:08:13 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:08:26 EST
Sending requests | Sat  5 Dec 2020 18:08:28 EST
Requests done | Sat  5 Dec 2020 18:08:59 EST
Finishing snapshot | Sat  5 Dec 2020 18:09:59 EST

LEAK SIZE: 2.36 mb
Big diff: Array [2072 new] --> 580.66 kb
Big diff: Code [272 new] --> 507.94 kb
Big diff: Object [4213 new] --> 188.16 kb
Big diff: String [3636 new] --> 170.05 kb


GC collected

FINAL MEMORY
rss 306.49 MB
heapTotal 76.84 MB
heapUsed 69.73 MB
external 3.83 MB



--------------------
Changes: storing events
--------------------


GIT DIFF


diff --git a/src/bp/core/botpress.ts b/src/bp/core/botpress.ts
index e833774d7..59b599efc 100644
--- a/src/bp/core/botpress.ts
+++ b/src/bp/core/botpress.ts
@@ -405,7 +405,7 @@ export class Botpress {
 
     this.decisionEngine.onAfterEventProcessed = async (event: sdk.IO.IncomingEvent) => {
       if (!event.ndu) {
-        // this.eventCollector.storeEvent(event)
+        this.eventCollector.storeEvent(event)
         return this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
       }
 
@@ -414,7 +414,7 @@ export class Botpress {
       const activeWorkflow = Object.keys(workflows).find(x => workflows[x].status === 'active')
       const completedWorkflows = Object.keys(workflows).filter(x => workflows[x].status === 'completed')
 
-      // this.eventCollector.storeEvent(event, activeWorkflow ? workflows[activeWorkflow] : undefined)
+      this.eventCollector.storeEvent(event, activeWorkflow ? workflows[activeWorkflow] : undefined)
       await this.hookService.executeHook(new Hooks.AfterEventProcessed(this.api, event))
 
       completedWorkflows.forEach(async workflow => {
Starting botpress | Sat  5 Dec 2020 18:15:39 EST

BEFORE MEMORY
rss 183.54 MB
heapTotal 111.43 MB
heapUsed 82.57 MB
external 37.05 MB
Starting warmup | Sat  5 Dec 2020 18:15:49 EST
Warmup done | Sat  5 Dec 2020 18:16:00 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:16:14 EST
Sending requests | Sat  5 Dec 2020 18:16:16 EST
Requests done | Sat  5 Dec 2020 18:16:47 EST
Finishing snapshot | Sat  5 Dec 2020 18:17:47 EST

LEAK SIZE: 2.07 mb
Big diff: Array [2214 new] --> 480.72 kb
Big diff: Code [252 new] --> 380.98 kb
Big diff: Object [4199 new] --> 187.53 kb
Big diff: String [3648 new] --> 170.36 kb


GC collected

FINAL MEMORY
rss 305.75 MB
heapTotal 76.59 MB
heapUsed 69.56 MB
external 3.8 MB



--------------------
Changes: eventCollector enabled in botpress config
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 18:18:29 EST

BEFORE MEMORY
rss 184.16 MB
heapTotal 111.68 MB
heapUsed 83.38 MB
external 37.68 MB
Starting warmup | Sat  5 Dec 2020 18:18:39 EST
Warmup done | Sat  5 Dec 2020 18:18:51 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:19:04 EST
Sending requests | Sat  5 Dec 2020 18:19:06 EST
Requests done | Sat  5 Dec 2020 18:19:37 EST
Finishing snapshot | Sat  5 Dec 2020 18:20:37 EST

LEAK SIZE: 1.32 mb
Big diff: Object [4090 new] --> 182.45 kb
Big diff: String [3276 new] --> 158.48 kb


GC collected

FINAL MEMORY
rss 305.82 MB
heapTotal 77.59 MB
heapUsed 69.88 MB
external 3.83 MB



--------------------
Changes: just re-running results
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 18:21:32 EST

BEFORE MEMORY
rss 180.8 MB
heapTotal 109.11 MB
heapUsed 73.69 MB
external 29.94 MB
Starting warmup | Sat  5 Dec 2020 18:21:42 EST
Warmup done | Sat  5 Dec 2020 18:21:53 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:22:06 EST
Sending requests | Sat  5 Dec 2020 18:22:08 EST
Requests done | Sat  5 Dec 2020 18:22:40 EST
Finishing snapshot | Sat  5 Dec 2020 18:23:40 EST

LEAK SIZE: 2.19 mb
Big diff: Array [2094 new] --> 504.71 kb
Big diff: Code [267 new] --> 440.27 kb
Big diff: Object [4208 new] --> 187.92 kb
Big diff: String [3648 new] --> 171.41 kb


GC collected

FINAL MEMORY
rss 298.44 MB
heapTotal 76.84 MB
heapUsed 69.84 MB
external 3.83 MB



--------------------
Changes: logging in dialog engine
--------------------


GIT DIFF


diff --git a/src/bp/core/services/dialog/dialog-engine.ts b/src/bp/core/services/dialog/dialog-engine.ts
index 91ff8a495..bc5c2e6c5 100644
--- a/src/bp/core/services/dialog/dialog-engine.ts
+++ b/src/bp/core/services/dialog/dialog-engine.ts
@@ -44,23 +44,23 @@ export class DialogEngine {
     const currentFlow = this._findFlow(botId, context.currentFlow!)
     const currentNode = this._findNode(botId, currentFlow, context.currentNode!)
 
-    // if (event.ndu) {
-    //   const workflowName = currentFlow.name?.replace('.flow.json', '')
+    if (event.ndu) {
+      const workflowName = currentFlow.name?.replace('.flow.json', '')
 
-    //   const { currentWorkflow } = event.state.session
-    //   const { workflow } = event.state
+      const { currentWorkflow } = event.state.session
+      const { workflow } = event.state
 
-    //   if (currentWorkflow !== workflowName) {
-    //     this.changeWorkflow(event, workflowName)
-    //     event.state.session.currentWorkflow = workflowName
-    //   }
+      if (currentWorkflow !== workflowName) {
+        this.changeWorkflow(event, workflowName)
+        event.state.session.currentWorkflow = workflowName
+      }
 
-    //   const workflowEnded = currentNode.type === 'success' || currentNode.type === 'failure'
-    //   if (workflowEnded && workflow) {
-    //     workflow.success = currentNode.type === 'success'
-    //     workflow.status = 'completed'
-    //   }
-    // }
+      const workflowEnded = currentNode.type === 'success' || currentNode.type === 'failure'
+      if (workflowEnded && workflow) {
+        workflow.success = currentNode.type === 'success'
+        workflow.status = 'completed'
+      }
+    }
 
     // Property type skill-call means that the node points to a subflow.
     // We skip this step if we're exiting from a subflow, otherwise it will result in an infinite loop.
@@ -138,52 +138,52 @@ export class DialogEngine {
     return event
   }
 
-  // public changeWorkflow(event: IO.IncomingEvent, nextFlow: string) {
-  //   const { currentWorkflow, workflows } = event.state.session
-  //   const { workflow } = event.state
-
-  //   const parentFlow = this._findFlow(event.botId, `${nextFlow}.flow.json`).parent
-  //   const isSubFlow = !!currentWorkflow && nextFlow.startsWith(currentWorkflow)
-
-  //   // This workflow doesn't already exist, so we add it
-  //   if (!workflow) {
-  //     BOTPRESS_CORE_EVENT('bp_core_workflow_started', { botId: event.botId, channel: event.channel, wfName: nextFlow })
-
-  //     event.state.session.workflows = {
-  //       ...event.state.session.workflows,
-  //       [nextFlow]: {
-  //         eventId: event.id,
-  //         status: 'active',
-  //         parent: parentFlow
-  //       }
-  //     }
-  //     return
-  //   }
-
-  //   // We dive one level deeper (one more child)
-  //   if (isSubFlow) {
-  //     BOTPRESS_CORE_EVENT('bp_core_workflow_started', { botId: event.botId, channel: event.channel, wfName: nextFlow })
-
-  //     // The parent flow is inactive for now
-  //     workflow.status = 'pending'
-
-  //     event.state.session.workflows = {
-  //       ...event.state.session.workflows,
-  //       [nextFlow]: {
-  //         eventId: event.id,
-  //         status: 'active',
-  //         parent: currentWorkflow
-  //       }
-  //     }
-  //   } else {
-  //     workflow.status = 'completed'
-
-  //     // If the current workflow has a parent, and we return there, we update its status
-  //     if (workflow.parent && workflows[nextFlow]) {
-  //       workflows[nextFlow].status = 'active'
-  //     }
-  //   }
-  // }
+  public changeWorkflow(event: IO.IncomingEvent, nextFlow: string) {
+    const { currentWorkflow, workflows } = event.state.session
+    const { workflow } = event.state
+
+    const parentFlow = this._findFlow(event.botId, `${nextFlow}.flow.json`).parent
+    const isSubFlow = !!currentWorkflow && nextFlow.startsWith(currentWorkflow)
+
+    // This workflow doesn't already exist, so we add it
+    if (!workflow) {
+      BOTPRESS_CORE_EVENT('bp_core_workflow_started', { botId: event.botId, channel: event.channel, wfName: nextFlow })
+
+      event.state.session.workflows = {
+        ...event.state.session.workflows,
+        [nextFlow]: {
+          eventId: event.id,
+          status: 'active',
+          parent: parentFlow
+        }
+      }
+      return
+    }
+
+    // We dive one level deeper (one more child)
+    if (isSubFlow) {
+      BOTPRESS_CORE_EVENT('bp_core_workflow_started', { botId: event.botId, channel: event.channel, wfName: nextFlow })
+
+      // The parent flow is inactive for now
+      workflow.status = 'pending'
+
+      event.state.session.workflows = {
+        ...event.state.session.workflows,
+        [nextFlow]: {
+          eventId: event.id,
+          status: 'active',
+          parent: currentWorkflow
+        }
+      }
+    } else {
+      workflow.status = 'completed'
+
+      // If the current workflow has a parent, and we return there, we update its status
+      if (workflow.parent && workflows[nextFlow]) {
+        workflows[nextFlow].status = 'active'
+      }
+    }
+  }
 
   public async jumpTo(sessionId: string, event: IO.IncomingEvent, targetFlowName: string, targetNodeName?: string) {
     try {
@@ -440,28 +440,28 @@ export class DialogEngine {
   }
 
   private _detectInfiniteLoop(stacktrace: IO.JumpPoint[], botId: string) {
-    // // find the first node that gets repeated at least 3 times
-    // const loop = _.chain(stacktrace)
-    //   .groupBy(x => `${x.flow}|${x.node}`)
-    //   .values()
-    //   .filter(x => x.length >= 3)
-    //   .first()
-    //   .value()
-    // if (!loop) {
-    //   return
-    // }
-    // // we build the flow path for showing the loop to the end-user
-    // const recurringPath: string[] = []
-    // const { node, flow } = loop[0]
-    // for (let i = 0, r = 0; i < stacktrace.length && r < 2; i++) {
-    //   if (stacktrace[i].flow === flow && stacktrace[i].node === node) {
-    //     r++
-    //   }
-    //   if (r > 0) {
-    //     recurringPath.push(`${stacktrace[i].flow} (${stacktrace[i].node})`)
-    //   }
-    // }
-    // throw new FlowError(`Infinite loop detected. (${recurringPath.join(' --> ')})`, botId, loop[0].flow, loop[0].node)
+    // find the first node that gets repeated at least 3 times
+    const loop = _.chain(stacktrace)
+      .groupBy(x => `${x.flow}|${x.node}`)
+      .values()
+      .filter(x => x.length >= 3)
+      .first()
+      .value()
+    if (!loop) {
+      return
+    }
+    // we build the flow path for showing the loop to the end-user
+    const recurringPath: string[] = []
+    const { node, flow } = loop[0]
+    for (let i = 0, r = 0; i < stacktrace.length && r < 2; i++) {
+      if (stacktrace[i].flow === flow && stacktrace[i].node === node) {
+        r++
+      }
+      if (r > 0) {
+        recurringPath.push(`${stacktrace[i].flow} (${stacktrace[i].node})`)
+      }
+    }
+    throw new FlowError(`Infinite loop detected. (${recurringPath.join(' --> ')})`, botId, loop[0].flow, loop[0].node)
   }
 
   private _findFlow(botId: string, flowName: string) {
@@ -486,18 +486,18 @@ export class DialogEngine {
   }
 
   private _reportProcessingError(botId: string, err, event: IO.IncomingEvent, instruction: Instruction) {
-    // const nodeName = _.get(event, 'state.context.currentNode', 'N/A')
-    // const flowName = _.get(event, 'state.context.currentFlow', 'N/A')
-    // const instr = instruction.fn || instruction.type
-    // const message = `Error processing '${instr}'\nErr: ${err.message}\nBotId: ${botId}\nFlow: ${flowName}\nNode: ${nodeName}`
+    const nodeName = _.get(event, 'state.context.currentNode', 'N/A')
+    const flowName = _.get(event, 'state.context.currentFlow', 'N/A')
+    const instr = instruction.fn || instruction.type
+    const message = `Error processing '${instr}'\nErr: ${err.message}\nBotId: ${botId}\nFlow: ${flowName}\nNode: ${nodeName}`
 
     if (!err.hideStack) {
-      // this.logger
-      //   .forBot(botId)
-      //   .attachError(err)
-      //   .warn(message)
+      this.logger
+        .forBot(botId)
+        .attachError(err)
+        .warn(message)
     } else {
-      // this.logger.forBot(botId).warn(message)
+      this.logger.forBot(botId).warn(message)
     }
 
     addErrorToEvent(
@@ -522,22 +522,22 @@ export class DialogEngine {
   }
 
   private _debug(botId: string, target: string, action: string, args?: any) {
-    // if (args) {
-    //   debug.forBot(botId, `[${target}] ${action} %o`, args)
-    // } else {
-    //   debug.forBot(botId, `[${target}] ${action}`)
-    // }
+    if (args) {
+      debug.forBot(botId, `[${target}] ${action} %o`, args)
+    } else {
+      debug.forBot(botId, `[${target}] ${action}`)
+    }
   }
 
   private _logExitFlow(botId, target, currentFlow, currentNode, previousFlow, previousNode) {
-    // this._debug(botId, target, `transit (${currentFlow}) [${currentNode}] << (${previousFlow}) [${previousNode}]`)
+    this._debug(botId, target, `transit (${currentFlow}) [${currentNode}] << (${previousFlow}) [${previousNode}]`)
   }
 
   private _logEnterFlow(botId, target, currentFlow, currentNode, previousFlow, previousNode) {
-    // this._debug(botId, target, `transit (${previousFlow}) [${previousNode}] >> (${currentFlow}) [${currentNode}]`)
+    this._debug(botId, target, `transit (${previousFlow}) [${previousNode}] >> (${currentFlow}) [${currentNode}]`)
   }
 
   private _logTransition(botId, target, currentFlow, currentNode, transitionTo) {
-    // this._debug(botId, target, `transit (${currentFlow}) [${currentNode}] -> [${transitionTo}]`)
+    this._debug(botId, target, `transit (${currentFlow}) [${currentNode}] -> [${transitionTo}]`)
   }
 }
Starting botpress | Sat  5 Dec 2020 18:26:53 EST

BEFORE MEMORY
rss 183.31 MB
heapTotal 111.43 MB
heapUsed 82.78 MB
external 37.11 MB
Starting warmup | Sat  5 Dec 2020 18:27:03 EST
Warmup done | Sat  5 Dec 2020 18:27:14 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:27:29 EST
Sending requests | Sat  5 Dec 2020 18:27:31 EST
Requests done | Sat  5 Dec 2020 18:28:03 EST
Finishing snapshot | Sat  5 Dec 2020 18:29:03 EST

LEAK SIZE: 2.28 mb
Big diff: Array [2107 new] --> 505.64 kb
Big diff: Code [273 new] --> 506.23 kb
Big diff: Object [4221 new] --> 188.49 kb
Big diff: String [3621 new] --> 170.69 kb


GC collected

FINAL MEMORY
rss 303.15 MB
heapTotal 77.34 MB
heapUsed 69.76 MB
external 3.83 MB



--------------------
Changes: restored code sandbox
--------------------


GIT DIFF


diff --git a/src/bp/core/misc/code-sandbox.ts b/src/bp/core/misc/code-sandbox.ts
index f4cc19bb0..4bac2c865 100644
--- a/src/bp/core/misc/code-sandbox.ts
+++ b/src/bp/core/misc/code-sandbox.ts
@@ -73,8 +73,15 @@ export class SafeCodeSandbox {
   async run(fileName: string): Promise<any> {
     const code = fs.readFileSync(this.filesMap[fileName], 'utf8')
     try {
-      return require(this.filesMap[fileName])
-      // Await cause if it returns a promise we await it
+      return this.vm.run(
+        code,
+        path.join(
+          path.resolve(this.tmpPath, 'builtin'), // TODO: use the correct module path
+          `${Math.random()
+            .toString()
+            .substr(2, 6)}.js`
+        )
+      ) // Await cause if it returns a promise we await it
     } catch (e) {
       throw new VError(e, `Error executing file "${fileName}" in SafeSandbox`)
     }
Starting botpress | Sat  5 Dec 2020 18:32:15 EST

BEFORE MEMORY
rss 183.02 MB
heapTotal 111.34 MB
heapUsed 82.72 MB
external 36.89 MB
Starting warmup | Sat  5 Dec 2020 18:32:25 EST
Warmup done | Sat  5 Dec 2020 18:32:36 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:32:50 EST
Sending requests | Sat  5 Dec 2020 18:32:52 EST
Requests done | Sat  5 Dec 2020 18:33:24 EST
Finishing snapshot | Sat  5 Dec 2020 18:34:24 EST

LEAK SIZE: 8.66 mb
Big diff: Array [9532 new] --> 3.83 mb
Big diff: Closure [43194 new] --> 2.31 mb
Big diff: Code [295 new] --> 534.77 kb
Big diff: Object [10816 new] --> 342.95 kb
Big diff: String [3621 new] --> 171.12 kb
Big diff: system / Context [4200 new] --> 332.81 kb


GC collected

FINAL MEMORY
rss 334.39 MB
heapTotal 86.47 MB
heapUsed 78.94 MB
external 3.83 MB



--------------------
Changes: reverted code sandbox, too big
--------------------


GIT DIFF


diff --git a/src/bp/core/misc/code-sandbox.ts b/src/bp/core/misc/code-sandbox.ts
index 4bac2c865..f4cc19bb0 100644
--- a/src/bp/core/misc/code-sandbox.ts
+++ b/src/bp/core/misc/code-sandbox.ts
@@ -73,15 +73,8 @@ export class SafeCodeSandbox {
   async run(fileName: string): Promise<any> {
     const code = fs.readFileSync(this.filesMap[fileName], 'utf8')
     try {
-      return this.vm.run(
-        code,
-        path.join(
-          path.resolve(this.tmpPath, 'builtin'), // TODO: use the correct module path
-          `${Math.random()
-            .toString()
-            .substr(2, 6)}.js`
-        )
-      ) // Await cause if it returns a promise we await it
+      return require(this.filesMap[fileName])
+      // Await cause if it returns a promise we await it
     } catch (e) {
       throw new VError(e, `Error executing file "${fileName}" in SafeSandbox`)
     }
Starting botpress | Sat  5 Dec 2020 18:38:44 EST

BEFORE MEMORY
rss 186.46 MB
heapTotal 111.59 MB
heapUsed 82.38 MB
external 36.9 MB
Starting warmup | Sat  5 Dec 2020 18:38:54 EST
Warmup done | Sat  5 Dec 2020 18:39:06 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:39:19 EST
Sending requests | Sat  5 Dec 2020 18:39:21 EST
Requests done | Sat  5 Dec 2020 18:39:52 EST
Finishing snapshot | Sat  5 Dec 2020 18:40:52 EST

LEAK SIZE: 2.27 mb
Big diff: Array [2250 new] --> 526.63 kb
Big diff: Code [283 new] --> 467.98 kb
Big diff: Object [4223 new] --> 188.66 kb
Big diff: String [3635 new] --> 171.68 kb


GC collected

FINAL MEMORY
rss 286.26 MB
heapTotal 78.09 MB
heapUsed 69.9 MB
external 3.83 MB



--------------------
Changes: test remove vm
--------------------


GIT DIFF


diff --git a/src/bp/core/services/action/vm.ts b/src/bp/core/services/action/vm.ts
index 01942c836..cdfb3db79 100644
--- a/src/bp/core/services/action/vm.ts
+++ b/src/bp/core/services/action/vm.ts
@@ -2,11 +2,11 @@ import { NodeVM, VMScript } from 'vm2'
 
 export class VmRunner {
   runInVm(vm: NodeVM, code: string, path?: string) {
-    const script = new VMScript(code, { filename: path })
+    // const script = new VMScript(code, { filename: path })
 
     return new Promise((resolve, reject) => {
       try {
-        const retValue = vm.run(script)
+        const retValue = eval(code) // vm.run(script)
 
         // Check if code returned a Promise-like object
         if (retValue && typeof retValue.then === 'function') {
Starting botpress | Sat  5 Dec 2020 18:43:05 EST

BEFORE MEMORY
rss 182.8 MB
heapTotal 111.93 MB
heapUsed 82.22 MB
external 36.9 MB
Starting warmup | Sat  5 Dec 2020 18:43:15 EST
Warmup done | Sat  5 Dec 2020 18:43:26 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:43:39 EST
Sending requests | Sat  5 Dec 2020 18:43:41 EST
Requests done | Sat  5 Dec 2020 18:44:13 EST
Finishing snapshot | Sat  5 Dec 2020 18:45:13 EST

LEAK SIZE: 1.24 mb
Big diff: Object [4092 new] --> 182.55 kb
Big diff: String [3253 new] --> 157.76 kb


GC collected

FINAL MEMORY
rss 312.54 MB
heapTotal 77.09 MB
heapUsed 69.82 MB
external 3.83 MB



--------------------
Changes: re-run
--------------------


GIT DIFF


Starting botpress | Sat  5 Dec 2020 18:46:52 EST

BEFORE MEMORY
rss 181.89 MB
heapTotal 110.93 MB
heapUsed 83.1 MB
external 37.44 MB
Starting warmup | Sat  5 Dec 2020 18:47:02 EST
Warmup done | Sat  5 Dec 2020 18:47:14 EST

GC collected
Snapshot memory
done
Snapshot done | Sat  5 Dec 2020 18:47:26 EST
Sending requests | Sat  5 Dec 2020 18:47:29 EST
Requests done | Sat  5 Dec 2020 18:48:00 EST
Finishing snapshot | Sat  5 Dec 2020 18:49:00 EST

LEAK SIZE: 1.23 mb
Big diff: Object [4094 new] --> 182.61 kb
Big diff: String [3258 new] --> 157.45 kb


GC collected

FINAL MEMORY
rss 297.16 MB
heapTotal 77.34 MB
heapUsed 69.88 MB
external 3.83 MB



--------------------
Changes: restored original CMS code
--------------------


GIT DIFF


diff --git a/src/bp/core/services/cms.ts b/src/bp/core/services/cms.ts
index 5b9f7b685..0f219f12b 100644
--- a/src/bp/core/services/cms.ts
+++ b/src/bp/core/services/cms.ts
@@ -233,7 +233,7 @@ export class CMSService implements IDisposeOnExit {
       .where({ botId, id })
       .first()
 
-    const deserialized = _.cloneDeep(this.transformDbItemToApi(element))
+    const deserialized = this.transformDbItemToApi(element)
     return language ? this._translateElement(deserialized, language) : deserialized
   }
 
@@ -440,11 +440,10 @@ export class CMSService implements IDisposeOnExit {
   }
 
   private _translateElement(element: ContentElement, language: string) {
-    return _.cloneDeep(element)
-    // return {
-    //   ...element,
-    //   formData: this.getOriginalProps(element.formData, this.getContentType(element.contentType), language)
-    // }
+    return {
+      ...element,
+      formData: this.getOriginalProps(element.formData, this.getContentType(element.contentType), language)
+    }
   }
 
   private transformDbItemToApi(item: any): ContentElement {
@@ -582,11 +581,11 @@ export class CMSService implements IDisposeOnExit {
 
     if (originalProps) {
       return originalProps.reduce((result, key) => {
-        result[key] = _.cloneDeep(formData[key + '$' + lang] || (defaultLang && formData[key + '$' + defaultLang]))
+        result[key] = formData[key + '$' + lang] || (defaultLang && formData[key + '$' + defaultLang])
         return result
       }, {})
     } else {
-      return { ...formData }
+      return formData
     }
   }
 
@@ -609,10 +608,10 @@ export class CMSService implements IDisposeOnExit {
     let contentTypeRenderer: ContentType
 
     const translateFormData = async (formData: object): Promise<object> => {
-      // const defaultLang = (await this.configProvider.getBotConfig(eventDestination.botId)).defaultLanguage
-      // const lang = _.get(args, 'event.state.user.language')
+      const defaultLang = (await this.configProvider.getBotConfig(eventDestination.botId)).defaultLanguage
+      const lang = _.get(args, 'event.state.user.language')
 
-      return this.getOriginalProps(formData, contentTypeRenderer, 'en', 'en')
+      return this.getOriginalProps(formData, contentTypeRenderer, lang, defaultLang)
     }
 
     if (contentId.startsWith('!')) {
@@ -624,25 +623,25 @@ export class CMSService implements IDisposeOnExit {
       contentTypeRenderer = this.getContentType(content.contentType)
       content.formData = await translateFormData(content.formData)
 
-      _.set(content, 'formData', renderRecursive(content.formData, _.cloneDeep(args)))
+      _.set(content, 'formData', renderRecursive(content.formData, args))
 
       const text = _.get(content.formData, 'text')
       const variations = _.get(content.formData, 'variations')
 
       const message = _.sample([text, ...(variations || [])])
       if (message) {
-        _.set(content, 'formData.text', renderTemplate(message, _.cloneDeep(args)))
+        _.set(content, 'formData.text', renderTemplate(message, args))
       }
 
       args = {
-        ..._.cloneDeep(args),
-        ..._.cloneDeep(content.formData)
+        ...args,
+        ...content.formData
       }
     } else if (contentId.startsWith('@')) {
       contentTypeRenderer = this.getContentType(contentId.substr(1))
       args = {
-        ..._.cloneDeep(args),
-        ..._.cloneDeep(await translateFormData(args))
+        ...args,
+        ...(await translateFormData(args))
       }
     } else {
       contentTypeRenderer = this.getContentType(contentId)
@@ -650,12 +649,12 @@ export class CMSService implements IDisposeOnExit {
 
     if (args.text) {
       args = {
-        ..._.cloneDeep(args),
-        text: renderTemplate(args.text, _.cloneDeep(args))
+        ...args,
+        text: renderTemplate(args.text, args)
       }
     }
 
-    let payloads = contentTypeRenderer.renderElement({ ...this._getAdditionalData(), ..._.cloneDeep(args) }, channel)
+    let payloads = contentTypeRenderer.renderElement({ ...this._getAdditionalData(), ...args }, channel)
     if (!_.isArray(payloads)) {
       payloads = [payloads]
     }
